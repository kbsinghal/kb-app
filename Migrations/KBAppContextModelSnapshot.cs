// <auto-generated />
using kb_app.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace kbapp.Migrations
{
    [DbContext(typeof(KBAppContext))]
    partial class KBAppContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125");

            modelBuilder.Entity("kb_app.Models.Entity", b =>
                {
                    b.Property<int>("EntityID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AreaID");

                    b.Property<string>("AreaName");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<string>("EmailAddress");

                    b.Property<string>("EntityType");

                    b.Property<string>("FacebookAddress");

                    b.Property<string>("FirstName");

                    b.Property<string>("GooglePlusAddress");

                    b.Property<bool>("IsActive");

                    b.Property<short>("IsRegistered");

                    b.Property<string>("LastName");

                    b.Property<byte[]>("Logo");

                    b.Property<string>("MiddleName");

                    b.Property<string>("Name");

                    b.Property<string>("NickName");

                    b.Property<int>("NoOfFollowers");

                    b.Property<int>("NoOfPastEvents");

                    b.Property<int>("NoOfUpcomingEvents");

                    b.Property<string>("RegisteredAddress");

                    b.Property<string>("RegisteredCity");

                    b.Property<int>("RegisteredCityID");

                    b.Property<string>("RegisteredState");

                    b.Property<int>("RegisteredStateID");

                    b.Property<string>("TwitterAddress");

                    b.Property<int>("UpdatedBy");

                    b.Property<DateTime>("UpdatedOn");

                    b.Property<string>("WebsiteAddress");

                    b.Property<string>("YouTubeAddress");

                    b.HasKey("EntityID");

                    b.ToTable("Entity");
                });

            modelBuilder.Entity("kb_app.Models.Event", b =>
                {
                    b.Property<int>("EventID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AreaID");

                    b.Property<string>("AreaName");

                    b.Property<int>("CityID");

                    b.Property<string>("CityName");

                    b.Property<int>("CountryID");

                    b.Property<string>("CountryName");

                    b.Property<string>("EventAddress");

                    b.Property<string>("EventDescription");

                    b.Property<DateTime>("EventEndDate");

                    b.Property<DateTime>("EventEndTime");

                    b.Property<string>("EventName");

                    b.Property<DateTime>("EventStartDate");

                    b.Property<DateTime>("EventStartTime");

                    b.Property<float>("EventVenueLatitude");

                    b.Property<float>("EventVenueLongitude");

                    b.Property<bool>("IsActive");

                    b.Property<int>("StateID");

                    b.Property<string>("StateName");

                    b.HasKey("EventID");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("kb_app.Models.EventBanner", b =>
                {
                    b.Property<int>("EventBannerID")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("Banner");

                    b.Property<int>("EventID");

                    b.HasKey("EventBannerID");

                    b.HasIndex("EventID");

                    b.ToTable("EventBanner");
                });

            modelBuilder.Entity("kb_app.Models.EventOrganizer", b =>
                {
                    b.Property<int>("EventOrganizerID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("EntityID");

                    b.Property<int>("EventID");

                    b.HasKey("EventOrganizerID");

                    b.HasIndex("EntityID");

                    b.HasIndex("EventID");

                    b.ToTable("EventOrganizer");
                });

            modelBuilder.Entity("kb_app.Models.EventBanner", b =>
                {
                    b.HasOne("kb_app.Models.Event")
                        .WithMany("EventBanners")
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("kb_app.Models.EventOrganizer", b =>
                {
                    b.HasOne("kb_app.Models.Entity", "EntityOrganizer")
                        .WithMany()
                        .HasForeignKey("EntityID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("kb_app.Models.Event")
                        .WithMany("EventOrganizers")
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
